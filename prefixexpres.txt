#include <iostream>
#include <stack>
using namespace std;

struct Node {
    char value;
    Node* left;
    Node* right;

    Node(char val) : value(val), left(nullptr), right(nullptr) {}
};

bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

Node* constructTree(const string& prefix) {
    stack<Node*> s;

    for (int i = prefix.length() - 1; i >= 0; --i) {
        char c = prefix[i];
        Node* node = new Node(c);

        if (isOperator(c)) {
            Node* left = s.top(); s.pop();
            Node* right = s.top(); s.pop();
            node->left = left;
            node->right = right;
        }

        s.push(node);
    }
    return s.top();
}

void postOrderNonRecursive(Node* root) {
    if (!root) return;

    stack<Node*> s1, s2;
    s1.push(root);

    while (!s1.empty()) {
        Node* curr = s1.top(); s1.pop();
        s2.push(curr);

        if (curr->left) s1.push(curr->left);
        if (curr->right) s1.push(curr->right);
    }
    cout << "Post-order traversal (non-recursive): ";
    while (!s2.empty()) {
        cout << s2.top()->value << " ";
        s2.pop();
    }
    cout << endl;
}

void deleteTree(Node* root) {
    if (!root) return;
    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    string prefix = "+--a*bc/def";

    Node* root = constructTree(prefix);
    postOrderNonRecursive(root);
    deleteTree(root);

    return 0;
}
