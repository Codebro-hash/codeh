#include <iostream>
#include <GL/glut.h>
#include <cmath>

using namespace std;

class Transformation {
public:
    float matrix[3][3];

    
    Transformation() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                matrix[i][j] = (i == j) ? 1 : 0;
            }
        }
    }

    
    Transformation operator*(const Transformation& t) {
        Transformation result;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                result.matrix[i][j] = 0;
                for (int k = 0; k < 3; k++) {
                    result.matrix[i][j] += matrix[i][k] * t.matrix[k][j];
                }
            }
        }
        return result;
    }
};

int vertices[3][10], transformed[3][10]; 
int numVertices;  
float angle, sx, sy, xf, yf;  
int tx, ty;  


int ROUND_Num(float a) {
    return (int)(a + 0.5);
}


void draw_objects(int xa, int ya, int xb, int yb) {
    int dx = xb - xa, dy = yb - ya;
    int steps = (abs(dx) > abs(dy)) ? abs(dx) : abs(dy);

    float xinc = dx / (float)steps, yinc = dy / (float)steps;
    float x = xa, y = ya;

    glVertex2d(x, y);
    for (int i = 0; i < steps; i++) {
        x += xinc;
        y += yinc;
        glVertex2d(ROUND_Num(x), ROUND_Num(y));
    }
}


void LineDDA() {
    glClear(GL_COLOR_BUFFER_BIT);
    glBegin(GL_LINES);

    // Draw original shape
    for (int i = 0; i < numVertices; i++) {
        draw_objects(vertices[0][i], vertices[1][i], vertices[0][(i + 1) % numVertices], vertices[1][(i + 1) % numVertices]);
    }

    // Draw transformed shape
    for (int i = 0; i < numVertices; i++) {
        draw_objects(transformed[0][i], transformed[1][i], transformed[0][(i + 1) % numVertices], transformed[1][(i + 1) % numVertices]);
    }

    glEnd();
    glFlush();
}


void performTransformation(int choice) {
    Transformation t;  

    switch (choice) {
        case 1: {  
            cout << "\nEnter scaling factors (sx sy): ";
            cin >> sx >> sy;
            cout << "Enter fixed point (xf yf): ";
            cin >> xf >> yf;

            t.matrix[0][0] = sx;
            t.matrix[1][1] = sy;
            t.matrix[0][2] = xf * (1 - sx);
            t.matrix[1][2] = yf * (1 - sy);
            break;
        }
        case 2: {  
            cout << "\nEnter translation values (tx ty): ";
            cin >> tx >> ty;

            t.matrix[0][2] = tx;
            t.matrix[1][2] = ty;
            break;
        }
        default:
            cout << "Invalid choice!";
            return;
    }

    
    Transformation result = t * t; 

    
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < numVertices; j++) {
            transformed[i][j] = 0;
            for (int k = 0; k < 3; k++) {
                transformed[i][j] += result.matrix[i][k] * vertices[k][j];
            }
        }
    }

    
    cout << "\nTransformed Points:\n";
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < numVertices; j++) {
            cout << transformed[i][j] << "\t";
        }
        cout << "\n";
    }
}

int main(int argc, char** argv) {
    // Input vertices
    cout << "\nEnter number of vertices (max 10): ";
    cin >> numVertices;

    if (numVertices > 10) {
        cout << "Maximum vertices exceeded. Exiting." << endl;
        return 1;
    }

    // Input vertices (x, y)
    for (int i = 0; i < numVertices; i++) {
        cout << "Enter x coordinate of vertex " << i + 1 << ": ";
        cin >> vertices[0][i];
        cout << "Enter y coordinate of vertex " << i + 1 << ": ";
        cin >> vertices[1][i];
        vertices[2][i] = 1;  
    }

    
    cout << "\nInput Vertices:\n";
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < numVertices; j++) {
            cout << vertices[i][j] << "\t";
        }
        cout << "\n";
    }

    
    cout << "\nChoose transformation:\n1. Scaling\n2. Translation\n";
    int choice;
    cin >> choice;

    performTransformation(choice);

    
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(640, 480);
    glutCreateWindow("2D Transformation");
    glClearColor(1.0, 1.0, 1.0, 0.0);
    glColor3f(0.0, 0.0, 0.0);
    gluOrtho2D(0.0, 640.0, 0.0, 480.0);
    glutDisplayFunc(LineDDA);
    glutMainLoop();

    return 0;
}
