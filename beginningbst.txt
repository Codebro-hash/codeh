#include <iostream> //sciifhm
using namespace std;

struct Node {
    int val;
    Node* left;
    Node* right;

    Node(int v) {
        val = v;
        left = NULL;
        right = NULL;
    }
};

Node* insert(Node* root, int val) {
    if (root == NULL)
        return new Node(val);

    if (val < root->val)
        root->left = insert(root->left, val);
    else
        root->right = insert(root->right, val);

    return root;
}

void inorder(Node* root) {
    if (root != NULL) {
        inorder(root->left);       
        cout << root->val << " ";   
        inorder(root->right);       
    }
}

int height(Node* root) {
    if (root == NULL) return 0;

    int leftHeight = height(root->left);
    int rightHeight = height(root->right);

    return max(leftHeight, rightHeight) + 1;
}

int findMin(Node* root) {
    while (root->left != NULL)
        root = root->left;
    return root->val;
}

void mirror(Node* root) {
    if (root != NULL) {
        swap(root->left, root->right);
        mirror(root->left);
        mirror(root->right);
    }
}

int main() {
    Node* root = NULL;

    int values[] = {50, 30, 70, 20, 40, 60, 80};
    for (int i = 0; i < 7; i++)
        root = insert(root, values[i]);

    cout << "Inorder: ";
    inorder(root);
    cout << endl;

    root = insert(root, 25);
    cout << "After inserting 25: ";
    inorder(root);
    cout << endl;

    cout << "Height of tree: " << height(root) << endl;

    cout << "Minimum value: " << findMin(root) << endl;

    mirror(root);
    cout << "After mirroring: ";
    inorder(root);
    cout << endl;

 return 0;
}