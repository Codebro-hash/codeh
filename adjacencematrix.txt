#include <iostream>
#include <vector>
#include <queue>
#include <string>

using namespace std;

vector<vector<int>> adj;
vector<string> names;
vector<bool> visited;

void DFS(int v) {
    visited[v] = true;
    cout << names[v] << " ";
    for (int i = 0; i < adj.size(); ++i)
        if (adj[v][i] && !visited[i])
            DFS(i);
}

void BFS(int start) {
    fill(visited.begin(), visited.end(), false);
    queue<int> q;
    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        int v = q.front(); q.pop();
        cout << names[v] << " ";
        for (int i = 0; i < adj.size(); ++i)
            if (adj[v][i] && !visited[i]) {
                visited[i] = true;
                q.push(i);
            }
    }
}

int main() {
    int n = 5;
    names = {"Library", "Canteen", "Lab", "Main Gate", "Admin"};
    adj = vector<vector<int>>(n, vector<int>(n, 0));
    visited = vector<bool>(n, false);

    // Define edges of the graph
    adj[0][1] = adj[1][0] = 1;
    adj[0][2] = adj[2][0] = 1;
    adj[1][3] = adj[3][1] = 1;
    adj[2][4] = adj[4][2] = 1;

    cout << "DFS from Library: ";
    DFS(0);
    cout << "\nBFS from Library: ";
    BFS(0);
    cout << endl;
    return 0;
}
